name: Verificar JavaFX (frontend) al hacer PR → frontend

on:
  pull_request:
    branches: [ frontend ]

jobs:
  build-and-ui-smoketest:
    runs-on: ubuntu-latest

    steps:
      # ───────────────────────────────────────
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # ───────────────────────────────────────
      # 2) Java & Maven cache
      - name: Setup Temurin 21 + Maven cache
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      # ───────────────────────────────────────
      # 3) Build & unit tests
      - name: Build frontend (+tests)
        run: mvn -B -f analizador-frontend/pom.xml clean verify

      # ───────────────────────────────────────
      # 4) Package “fat jar”  (ajusta el goal si usas javafx-maven-plugin)
      - name: Package runnable jar
        run: mvn -B -f analizador-frontend/pom.xml package -DskipTests

      # ───────────────────────────────────────
      # 5) Instalar & arrancar Xvfb
      - name: Install Xvfb
        run: |
          sudo apt-get update -y
          sudo apt-get install -y xvfb

      # ───────────────────────────────────────
      # 6) Smoke-test de la GUI
      #
      #   Damos 15 s; si la app crashea → código ≠0 ⇒ job falla
      #   Si la app sigue viva pasados los 15 s, la matamos y
      #     consideramos que la inicialización fue correcta.
      - name: Launch JavaFX
        env:
          DISPLAY: ":99"
        run: |
          set -e  # aborta si algún comando devuelve ≠0
          # 6.1 Arrancar servidor X virtual
          Xvfb :99 -screen 0 1280x720x24 &
          XVFB_PID=$!
          # 6.2 Lanzar aplicación (elige una de las dos formas)
          # — Opción A — jar “fat” generado en target:
          java -jar analizador-frontend/target/analizador-frontend.jar &
          APP_PID=$!
